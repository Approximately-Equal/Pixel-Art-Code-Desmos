from PIL import Image
import math

#variables
w = int(753 / 2)
h = int(439 / 2)
c_divide
n = 10000
funct_num = 1

#counters
count_1 = 0
count_2 = 0
count_3 = 0

#lists
red = []
green = []
blue = []

pixel_values = []
color_values = []
color_index = []


#im Setup - Access image and get set RGB mode
im = Image.open("/Users/Approximately_Equal/Desktop/image copy.png", 'r')
pix = im.load()
img = im.convert('RGB') 


#Gets rgb values from each pixel in grid (w, h)
for y in range (h):
    for x in range(w):
        x_pixel = (im.size[0] / w) * x + im.size[0] / (w * 2)
        y_pixel = (im.size[1] / h) * y + im.size[1] / (h * 2)
        pixel_values.append(img.getpixel((x_pixel, y_pixel)))

#Divides the number of available colors by c_divide
for x in range(w * h):
    pixel_values[x] = [c_divide * math.ceil(pixel_values[x][0] / c_divide), 
                       c_divide * math.ceil(pixel_values[x][1] / c_divide),
                       c_divide * math.ceil(pixel_values[x][2] / c_divide)]
        
        
#Get list of all colors in image
for x in range (w * h):
    if (color_values.count(pixel_values[x]) == 0):
        color_values.append(pixel_values[x])
        count_1 = count_1 + 1

        
#Seperates the red, green, and blue values of the colors
for x in range(len(color_values)):
    red.append(color_values[x][0])
    green.append(color_values[x][1])
    blue.append(color_values[x][2])

    
print("w = " + str(w))
print("h = " + str(h))
print("# colors = " + str(len(red))
print()
print()
print()
print("r_{ed} = " + str(red))
print()
print("g_{reen} = " + str(green))
print()
print()
print("b_{lue} = " + str(blue))
print()
print()


#Finds which pixels are each of the colors found in the im
for x in range(w * h):
    for x1 in range (len(color_values)):
        if (pixel_values[x] == color_values[x1]):
            color_index.append(x1 + 1)
            

#Seperate lists in case pixels exceed Desmos list limits
index_list_final = [color_index[i:i + n] for i in range(0, len(color_index), n)]


#Prints each list seperately and adds the needed Desmos syntax
for x in range(math.ceil(len(color_index) / n)):
    print()
    print()
    print("l_{" + str(x + funct_num) + "} = " + str(index_list_final[x]))


print()
print()
print()
print()


#Desmos syntax for the proper functions (Color and Dot matrix)
for x in range(math.ceil(len(color_index) / n)):
    print(r"c_{olor" + str(x + funct_num) + r"} = \operatorname{rgb}\left(r_{ed}\left[l_{"  + 
          str(x + funct_num) + r"}\right], " + "g_{reen}\left[l_{" + str(x + funct_num) + 
          r"}\right],\ b_{lue}\left[l_{" + str(x + funct_num) + r"}\right]\right)")
    print()
    print(r"P_{" + str(x + funct_num) + r"} = \left[\left(\operatorname{mod}\left(i_{" + str(x + funct_num) + 
          r"},\ w\right) - \frac{w-1}{2}, \frac{h-1}{2} - \operatorname{floor}\left(\frac{i_{" + 
          str(x + funct_num) + r"}}{w}\right)\right) \operatorname{for}\ i_{" + str(x + funct_num) + 
          r"} = \left[" + str(n * x) + r"..." + str(n * (x + funct_num) - 1) + r"\right]\right]")
    print()

    
print()
print()
print()
print()


#Desmos syntax for the proper functions (Actual Cells)
for x in range(math.ceil(len(color_index) / n)):
    print("\left[\operatorname{polygon}\left(\left(P_{" + str(x + funct_num) + r"}.x\left[c_{" + str(x + funct_num) + 
          r"}\right] - \frac{1}{2} , P_{" + str(x + funct_num) + r"}.y\left[c_{" + str(x + funct_num) + 
          r"}\right] - \frac{1}{2}\right), \left(P_{" + str(x + funct_num) + r"}.x\left[c_{" + 
          str(x + funct_num) + r"}\right] - \frac{1}{2}, P_{" + str(x + funct_num) + r"}.y\left[c_{" + 
          str(x + funct_num) + r"}\right] + \frac{1}{2}\right), \left(P_{" + str(x + funct_num) + 
          r"}.x\left[c_{" + str(x + funct_num) + r"}\right] + \frac{1}{2} , P_{" + str(x + funct_num) + 
          r"}.y\left[c_{" + str(x + funct_num) + r"}\right] + \frac{1}{2}\right), \left(P_{" + str(x + funct_num) + 
          r"}.x\left[c_{" + str(x + funct_num) + r"}\right]\ + \frac{1}{2} , P_{" + str(x + funct_num) + 
          r"}.y\left[c_{" + str(x + funct_num) + r"}\right] - \frac{1}{2}\right) \right) \operatorname{for} c_{" + 
          str(x + funct_num) + r"} = \left[1...\operatorname{length}\left(P_{" + str(x + funct_num) + 
          r"}\right)\right]\right]")
    print()
